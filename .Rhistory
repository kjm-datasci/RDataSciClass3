Tbl = inne
Tbl = inner_join(select(VIX_1M,Date = `Trade Date`,VX_1M = Close),select(VIX_2M,Date = `Trade Date`, VX_2M = Close),by=c("Date"))
Tbl = inner_join(Tbl,select(XIV,Date,XIV = Close),by=c("Date"))
Ratio = Tbl[1350:1463,]
Ratio$Ratio = Ratio$VX_2M/Ratio$VX_1M-1
Ratio
ggplot(Ratio,aes(x=Date,y=Ratio))+geom_line()
source('~/Documents/Investments/XIV/XIV_Backtest_Loop_Function.R', echo=TRUE)
#debug(backtestFct)
ResultTbl = NULL
StatsTbl = NULL
Indicators = seq(0.05,0.15,by=0.01)
for(i in seq_along(Indicators)){
TestTbl = backtestFct(TradeVar = Tbl$XIV,
IndicatorVar = Tbl$VX_2M/Tbl$VX_1M-1,
IndicatorFlag = "GT",
IdicatorValue = Indicators[i],
PortfolioValue = 10000)
SummaryTbl = data.frame(Date = Tbl$Date,
Indicator = paste("Indicator_",Indicators[i],sep=""),
Portfolio=TestTbl$Portfolio)
StatsTblTmp = data.frame(Indicator = paste("Indicator_",Indicators[i],sep=""))
StatsTblTmp$InvAmt = TestTbl$Portfolio[1]
StatsTblTmp$Yrs = as.numeric((Tbl$Date[nrow(Tbl)]-Tbl$Date[1])/365.25)
StatsTblTmp$Profit = sum(TestTbl$Portfolio[2:nrow(TestTbl)]-TestTbl$Portfolio[1:(nrow(TestTbl)-1)])
StatsTblTmp$Return = StatsTblTmp$Profit / StatsTblTmp$InvAmt
StatsTblTmp$AnnualReturn = ((StatsTblTmp$Profit+StatsTblTmp$InvAmt)/
StatsTblTmp$InvAmt)^(1/StatsTblTmp$Yrs)-1
StatsTblTmp$DailyStdev = sd(TestTbl$Return-1)
StatsTblTmp$TotDaysInTrade = sum(TestTbl$Pos)-sum(TestTbl$Entry)
StatsTblTmp$AvgDaysInTrade = StatsTblTmp$TotDaysInTrade/sum(TestTbl$Entry)
StatsTblTmp$MaxDrawdown = max(TestTbl$Drawdown)
StatsTblTmp$MaxDDPctPort = max(TestTbl$Drawdown/TestTbl$Portfolio)
StatsTblTmp$Sharpe = StatsTblTmp$AnnualReturn/StatsTblTmp$DailyStdev
ResultTbl = rbind(ResultTbl,SummaryTbl)
StatsTbl = rbind(StatsTbl,StatsTblTmp)
}
ggplot(ResultTbl,aes(x=Date,y=Portfolio,group=Indicator,colour=Indicator))+geom_line()
View(Tbl)
Tbl = Tbl[526:1463,]
#debug(backtestFct)
ResultTbl = NULL
StatsTbl = NULL
Indicators = seq(0.05,0.15,by=0.01)
for(i in seq_along(Indicators)){
TestTbl = backtestFct(TradeVar = Tbl$XIV,
IndicatorVar = Tbl$VX_2M/Tbl$VX_1M-1,
IndicatorFlag = "GT",
IdicatorValue = Indicators[i],
PortfolioValue = 10000)
SummaryTbl = data.frame(Date = Tbl$Date,
Indicator = paste("Indicator_",Indicators[i],sep=""),
Portfolio=TestTbl$Portfolio)
StatsTblTmp = data.frame(Indicator = paste("Indicator_",Indicators[i],sep=""))
StatsTblTmp$InvAmt = TestTbl$Portfolio[1]
StatsTblTmp$Yrs = as.numeric((Tbl$Date[nrow(Tbl)]-Tbl$Date[1])/365.25)
StatsTblTmp$Profit = sum(TestTbl$Portfolio[2:nrow(TestTbl)]-TestTbl$Portfolio[1:(nrow(TestTbl)-1)])
StatsTblTmp$Return = StatsTblTmp$Profit / StatsTblTmp$InvAmt
StatsTblTmp$AnnualReturn = ((StatsTblTmp$Profit+StatsTblTmp$InvAmt)/
StatsTblTmp$InvAmt)^(1/StatsTblTmp$Yrs)-1
StatsTblTmp$DailyStdev = sd(TestTbl$Return-1)
StatsTblTmp$TotDaysInTrade = sum(TestTbl$Pos)-sum(TestTbl$Entry)
StatsTblTmp$AvgDaysInTrade = StatsTblTmp$TotDaysInTrade/sum(TestTbl$Entry)
StatsTblTmp$MaxDrawdown = max(TestTbl$Drawdown)
StatsTblTmp$MaxDDPctPort = max(TestTbl$Drawdown/TestTbl$Portfolio)
StatsTblTmp$Sharpe = StatsTblTmp$AnnualReturn/StatsTblTmp$DailyStdev
ResultTbl = rbind(ResultTbl,SummaryTbl)
StatsTbl = rbind(StatsTbl,StatsTblTmp)
}
ggplot(ResultTbl,aes(x=Date,y=Portfolio,group=Indicator,colour=Indicator))+geom_line()
View(StatsTbl)
View(Tbl)
Tbl = inner_join(Tbl,select(XIV,Date,XIV = Close),by=c("Date"))
Tbl = Tbl[526:1281,]
View(Tbl)
Tbl = inner_join(Tbl,select(XIV,Date,XIV = Close),by=c("Date"))
View(Tbl)
Tbl = inner_join(select(VIX_1M,Date = `Trade Date`,VX_1M = Close),select(VIX_2M,Date = `Trade Date`, VX_2M = Close),by=c("Date"))
Tbl = inner_join(Tbl,select(XIV,Date,XIV = Close),by=c("Date"))
Tbl = Tbl[526:1281,]
View(Tbl)
#debug(backtestFct)
ResultTbl = NULL
StatsTbl = NULL
Indicators = seq(0.05,0.15,by=0.01)
for(i in seq_along(Indicators)){
TestTbl = backtestFct(TradeVar = Tbl$XIV,
IndicatorVar = Tbl$VX_2M/Tbl$VX_1M-1,
IndicatorFlag = "GT",
IdicatorValue = Indicators[i],
PortfolioValue = 10000)
SummaryTbl = data.frame(Date = Tbl$Date,
Indicator = paste("Indicator_",Indicators[i],sep=""),
Portfolio=TestTbl$Portfolio)
StatsTblTmp = data.frame(Indicator = paste("Indicator_",Indicators[i],sep=""))
StatsTblTmp$InvAmt = TestTbl$Portfolio[1]
StatsTblTmp$Yrs = as.numeric((Tbl$Date[nrow(Tbl)]-Tbl$Date[1])/365.25)
StatsTblTmp$Profit = sum(TestTbl$Portfolio[2:nrow(TestTbl)]-TestTbl$Portfolio[1:(nrow(TestTbl)-1)])
StatsTblTmp$Return = StatsTblTmp$Profit / StatsTblTmp$InvAmt
StatsTblTmp$AnnualReturn = ((StatsTblTmp$Profit+StatsTblTmp$InvAmt)/
StatsTblTmp$InvAmt)^(1/StatsTblTmp$Yrs)-1
StatsTblTmp$DailyStdev = sd(TestTbl$Return-1)
StatsTblTmp$TotDaysInTrade = sum(TestTbl$Pos)-sum(TestTbl$Entry)
StatsTblTmp$AvgDaysInTrade = StatsTblTmp$TotDaysInTrade/sum(TestTbl$Entry)
StatsTblTmp$MaxDrawdown = max(TestTbl$Drawdown)
StatsTblTmp$MaxDDPctPort = max(TestTbl$Drawdown/TestTbl$Portfolio)
StatsTblTmp$Sharpe = StatsTblTmp$AnnualReturn/StatsTblTmp$DailyStdev
ResultTbl = rbind(ResultTbl,SummaryTbl)
StatsTbl = rbind(StatsTbl,StatsTblTmp)
}
ggplot(ResultTbl,aes(x=Date,y=Portfolio,group=Indicator,colour=Indicator))+geom_line()
View(StatsTbl)
rm(list=ls())
require(Quandl)
require(ggplot2)
require(dplyr)
# Pull Data from Quandl
VIX_1M = Quandl("CHRIS/CBOE_VX1",type = "raw",order="asc")
VIX_2M = Quandl("CHRIS/CBOE_VX2",type = "raw",order="asc")
XIV = Quandl("GOOG/NYSEARCA_XIV",type = "raw",order="asc")
# Aggregate Data in Table
Tbl = inner_join(select(VIX_1M,Date = `Trade Date`,VX_1M = Close),
select(VIX_2M,Date = `Trade Date`, VX_2M = Close),
by=c("Date"))
Tbl = inner_join(Tbl,select(XIV,Date,XIV = Close),by=c("Date"))
Tbl$Ratio = Tbl$VX_2M/Tbl$VX_1M-1
ggplot(Tbl,aes(x=Date,y=Ratio))+geom_line()
ggplot(Tbl,aes(x=Ratio))+geom_histogram()
ggplot(Tbl,aes(Ratio,XIV))+geom_point()
plot(Tbl$XIV)
Tbl$XIV = ifelse(Tbl$XIV>85,Tbl$XIV/10,Tbl$XIV)
plot(Tbl$XIV)
ggplot(Tbl,aes(Ratio,XIV))+geom_point()
Tbl$XIV_pctchg = c(0,(Tbl$XIV[2:nrow(Tbl)]/Tbl$XIV[1:(nrow(Tbl)-1)]-1))
ggplot(Tbl,aes(Ratio,XIV_pctchg))+geom_point()
lm(XIV_pctchg ~ Ratio+VX_1M,data=Tbl)
Reg  = lm(XIV_pctchg ~ Ratio+VX_1M,data=Tbl)
summary(Reg)
rm()
rm(list=ls())
clc
install.packages("swirl")
packageVersion("swirl")
library(swirl)
swirl()
cumIS = seq(from = 0,to = 50000000,by = 5000000)
avgRWA = 24000000000
taxRt = 0.32
cumIS = seq(from = 0,to = 50000000,by = 5000000)
cumIS_AT = cumIS*(1-taxRt)
rnorm(n = 10,mean = 0,sd = 5000)
hist(rnorm(n = 10,mean = 0,sd = 5000))
hist(rnorm(n = 10000,mean = 0,sd = 5000))
capThresh = data.frame(cumIS = seq(from = 0,to = 50000000,by = 5000000))
capThresh$cumIS_AT = cumIS*(1-taxRt)
capThresh$cumIS_AT = capThresh$cumIS*(1-taxRt)
rm(list=ls())
avgRWA = 24000000000
taxRt = 0.32
capThresh = data.frame(cumIS = seq(from = 0,to = 50000000,by = 5000000))
capThresh$cumIS_AT = capThresh$cumIS*(1-taxRt)
View(capThresh)
capThresh$RWA = avgRWA
capThresh$capImp = capThresh$cumIS_AT/capThresh$RWA
View(capThresh)
capThresh$capImp_BP = capThresh$capImp * 10000
View(capThresh)
expChgAvg = 10000
expChgST = 100000
rm(expChgST)
expChgSD = 100000
rnorm(n = (9*2),mean = 0,sd = expChgSD)
sims = 2
quarters = 9
rnorm(n = (sims*quarters),mean = 0,sd = expChgSD)
randMatrix = matrix(rnorm(n = (sims*quarters),mean = 0,sd = expChgSD),nrow = sims,ncol = quarters)
randMatrix
matrix(seq(1:18),nrow = sims,ncol = quarters)
matrix(seq(1:18),nrow = sims,ncol = quarters,byrow = TRUE)
randMatrix = matrix(rnorm(n = (sims*quarters),mean = 0,sd = expChgSD),nrow = sims,ncol = quarters,byrow = TRUE)
randMatrix = data.frame(matrix(rnorm(n = (sims*quarters),mean = 0,sd = expChgSD),nrow = sims,ncol = quarters,byrow = TRUE))
View(randMatrix)
nameVec = c("Q1","Q2","Q3","Q4","Q5","Q6","Q7","Q8","Q9")
names(randMatrix) = nameVec
expLevel = 15000000
simExp = data.frame(Q1 = randMatrix$Q1+expLevel)
View(simExp)
simExp$Q2 = simExp$Q1 + randMatrix$Q2
simExp$Q2 = simExp$Q1 + randMatrix$Q2
simExp = data.frame(Q1 = randMatrix$Q1+expLevel)
simExp$Q2 = simExp$Q1 + randMatrix$Q2
simExp$Q3 = simExp$Q2 + randMatrix$Q3
simExp$Q4 = simExp$Q3 + randMatrix$Q4
simExp$Q5 = simExp$Q4 + randMatrix$Q5
simExp$Q6 = simExp$Q5 + randMatrix$Q6
simExp$Q7 = simExp$Q6 + randMatrix$Q7
simExp$Q8 = simExp$Q7 + randMatrix$Q8
simExp$Q9 = simExp$Q8 + randMatrix$Q9
View(simExp)
expError = simExp = expLevel
expError = simExp - expLevel
simExp = data.frame(Q1 = randMatrix$Q1+expLevel)
simExp$Q2 = simExp$Q1 + randMatrix$Q2
simExp$Q3 = simExp$Q2 + randMatrix$Q3
simExp$Q4 = simExp$Q3 + randMatrix$Q4
simExp$Q5 = simExp$Q4 + randMatrix$Q5
simExp$Q6 = simExp$Q5 + randMatrix$Q6
simExp$Q7 = simExp$Q6 + randMatrix$Q7
simExp$Q8 = simExp$Q7 + randMatrix$Q8
simExp$Q9 = simExp$Q8 + randMatrix$Q9
expError = simExp - expLevel
View(expError)
totalExpError = rowSums(expError)
totalExpError
plot(totalExpError)
totalExpError = data.frame(pretaxError = rowSums(expError))
totalExpError$postTaxError = totalExpError$pretaxError * (1-taxRt)
totalExpError$capitalImpact = totalExpError$postTaxError / avgRWA
totalExpError$capitalBPImpact = totalExpError$capitalImpact * 10000
View(totalExpError)
library(ggplot)
library(ggplot2)
ggplot(totalExpError,aes(x=capitalBPImpact))+geom_histogram()
source('~/capitalImpactSim.R', echo=TRUE)
View(expError)
plot(expError$Q9)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
totalExpError$oneBPflag = ifelse(totalExpError$capitalBPImpact>=1,1,0)
sum(totalExpError$oneBPflag)
sum(totalExpError$oneBPflag)/nrow(totalExpError)
(sum(totalExpError$oneBPflag)/nrow(totalExpError))*100
(sum(totalExpError$oneBPflag)/nrow(totalExpError))
source('~/.active-rstudio-document', echo=TRUE)
(sum(totalExpError$oneBPflag)/nrow(totalExpError))
source('~/.active-rstudio-document', echo=TRUE)
(sum(totalExpError$oneBPflag)/nrow(totalExpError))
View(randMatrix)
View(simExp)
View(expError)
expError[1,]
sum(expError[1,])
View(totalExpError)
mean(totalExpError$capitalBPImpact)
(sum(totalExpError$oneBPflag)/nrow(totalExpError))
source('~/.active-rstudio-document', echo=TRUE)
(sum(totalExpError$oneBPflag)/nrow(totalExpError))
source('~/.active-rstudio-document', echo=TRUE)
sd(totalExpError$capitalBPImpact)
sd(totalExpError$capitalImpact)
sd(totalExpError$capitalImpact)*avgRWA
sd(totalExpError$capitalImpact)*avgRWA*(1/sqrt(9))
View(randMatrix)
View(totalExpError)
View(expError)
rm(list=ls())
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf = read.csv(file = path2csv,stringsAsFactors = FALSE)
mydf = read.csv(path2csv,stringsAsFactors = FALSE)
mydf -> read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplry")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package_ country)
select(cran, ip_id, package_country)
select(cran, ip_id, package, country)
exit()
install.packages("RMySQL")
library(RMySQL)
ucscDB = dbConnect(MYSQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
ucscDB = dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result = dbGetQuery(ucscDB,"show databases;")
dbDisconnect(ucscDB)
result
rm(list=ls())
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "5bafd387c2b7069202bc",
secret = "ca0f457e709691c758020ad712af6158764d2327")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
rm(list=ls())
swirl()
library(swirl)
swirl()
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,r_version !is.na())
filter(cran,r_version != is.na())
filter(cran,!is.na(r_version))
cran2 = select(cran,size:ip_id)
cran2 <- select(cran,size:ip_id)
arrange(cran, ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3 = select(cran,ip_id,package,size)
cran3 = select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
group_by(cran,package)
by_package <- group_by(cran,package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.9)
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum,count > 679)
top_counts <- filter(pack_sum,count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
submit()
submit()
submit()
submit()
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2,sex_class,count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res,sex_class, c("sex","class"))
submit()
students3
submit()
students3 %>%
gather(-name ,-test ,class1 : class5,na.rm = TRUE) %>%
print
students3 %>%
gather(class , grade, class1 : class5,na.rm = TRUE) %>%
print
submit()
?spread()
?spread
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(midterm , final) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test , variables) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(variables, test) %>%
print
submit()
submit()
submit()
spread(test, class) %>%
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, class) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, Test) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
print
submit()
library(readr)
parse_number("class5")
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = parse_number(class)) %>%
print
submit()
students4
submit()
student_info <- students4 %>%
select(id, name, sex) %>%
unique(id) %>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
unique(id,name,sex) %>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
unique() %>%
print
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed,failed)
sat
sat %>%
select(-contains("total"))
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range)
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex,c("part","sex"))
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex) %>%
mutate(total = sum(count),
prop = count / total)
) %>% print
submit()
getSrcDirctory()
getSrcDirectory()
getSrcDirectory()[1]
getwd()
dirname(parent.frame(2))
dirname(parent.frame(2)$ofile)
source("run_analysis.R",chdir=TRUE)
setwd("/Users/kyle_mendenhall/Documents/coursera/R Data Science Program/Class 3 - Cleaning Data/Assignment/RDataSciClass3")
rm(list = ls())
library(dplyr)
library(xlsx)
# library(XML)
# library(data.table)
setwd("/Users/kyle_mendenhall/Documents/coursera/R Data Science Program/Class 3 - Cleaning Data/Assignment/RDataSciClass3")
setwd("/Users/kyle_mendenhall/Documents/coursera/R Data Science Program/Class 3 - Cleaning Data/Assignment/")
setwd("/Users/kyle_mendenhall/Documents/coursera/R Data Science Program/Class 3 - Cleaning Data/Assignment/RDataSciClass3")
setwd("/Users/kyle_mendenhall/Documents/coursera/R Data Science Program/Class 3 - Cleaning Data/Assigmtent/RDataSciClass3")
setwd("/Users/kyle_mendenhall/Documents/coursera/R Data Science Program/Class 3 - Cleaning Data/Assigmnent/RDataSciClass3")
rm(list = ls())
library(dplyr)
library(xlsx)
# library(XML)
# library(data.table)
setwd("/Users/kyle_mendenhall/Documents/coursera/R Data Science Program/Class 3 - Cleaning Data/Assigmnent/RDataSciClass3")
train = read.table(file = "UCI HAR Dataset/train/X_train.txt")     # Train dataset
rm(list = ls())
getwd()
source('~/Documents/coursera/R Data Science Program/Class 3 - Cleaning Data/Assigmnent/RDataSciClass3/run_analysis.R', echo=TRUE)
write.table(tidydata,file = "tidydata.txt",sep = " ")
getwd()
